{
	"info": {
		"_postman_id": "008750ee-5cc5-4f4b-8be8-452818808df7",
		"name": "HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20299950"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Check string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let resp_f = pm.response.json()\r",
							"let req_f = request.data\r",
							"let req_name = req_f.name\r",
							"let resp_name = resp_f.name\r",
							"console.log(req_name)\r",
							"console.log(resp_name)\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name задать самому)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(\"Aleksandr\").to.eql(resp_name);\r",
							"});\r",
							"let req_age = req_f.age\r",
							"let resp_age = resp_f.age\r",
							"console.log()\r",
							"// 5. Проверить, что age в ответе равно age s request (age задать самому)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(\"25\").to.eql(resp_age);\r",
							"});\r",
							"let req_salary = +req_f.salary\r",
							"let resp_salary = +resp_f.salary\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary задать самому)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(1000).to.eql(resp_salary);\r",
							"});\r",
							"// 7. Спарсить request.\r",
							"let req_body = request.body\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name_auto\", function () {\r",
							"    pm.expect(req_name).to.eql(resp_name);\r",
							"});\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age auto\", function () {\r",
							"    pm.expect(req_age).to.eql(resp_age);\r",
							"});\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary auto\", function () {\r",
							"    pm.expect(req_salary).to.eql(resp_salary);\r",
							"});\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log (resp_f.family)\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary_for_1_5_years = req_f.salary * 4\r",
							"let u_salary_1_5_year = resp_f.family.u_salary_1_5_year\r",
							"pm.test(\"Check u_salary_1_5_year\", function () {\r",
							"    pm.expect(salary_for_1_5_years).to.eql(u_salary_1_5_year);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Aleksandr",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Aleksandr",
							"disabled": true
						},
						{
							"key": "age",
							"value": "25",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let resp_f = pm.response.json()\r",
							"// 4. Спарсить request.\r",
							"let query = {};\r",
							"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
							"console.log(query)\r",
							"let query_name = query.name\r",
							"let resp_f_name = resp_f.name\r",
							"console.log(resp_f_name)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(query_name).to.eql(resp_f_name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let query_age = query.age\r",
							"let resp_f_age = resp_f.age\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(query_age).to.eql(resp_f_age);\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let query_salary = +query.salary\r",
							"let resp_f_salary = +resp_f.salary\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(query_salary).to.eql(resp_f_salary);\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(resp_f.family)\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check dog name\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check dog age\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"let dog_name = resp_f.family.pets.dog.name\r",
							"pm.test(\"Check dog name Luky\", function () {\r",
							"   \r",
							"    pm.expect(dog_name).to.eql(\"Luky\");\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"let dog_age = resp_f.family.pets.dog.age\r",
							"pm.test(\"Check dog age Luky\", function () {\r",
							"   \r",
							"    pm.expect(dog_age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Aleksandr&age=25&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Aleksandr"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let resp_f = pm.response.json()\r",
							"// 4. Спарсить request.\r",
							"let query = {};\r",
							"pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
							"console.log(query)\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let query_name = query.name\r",
							"let resp_f_name = resp_f.name\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(query_name).to.eql(resp_f_name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let query_age = +query.age\r",
							"let resp_f_age = +resp_f.age\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(query_age).to.eql(resp_f_age);\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"Your request salary is \" + query.salary)\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"Your response salary is \" + resp_f.salary)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"Your response salary is \" + resp_f.salary[0])\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Your response salary is \" + resp_f.salary[1])\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Your response salary is \" + resp_f.salary[2])\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"let query_salary = +query.salary\r",
							"let resp_salary = resp_f.salary\r",
							"pm.test(\"Check salary 1\", function () {\r",
							"    pm.expect(query_salary).to.eql(resp_salary[0]);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let query_salary2 = Number(query.salary)\r",
							"let resp_salary2 = Number(resp_f.salary[1])\r",
							"pm.test(\"Check salary 2\", function () {\r",
							"    pm.expect(query_salary2 * 2).to.eql(resp_salary2);\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let query_salary3 = Number(query.salary)\r",
							"let resp_salary3 = Number(resp_f.salary[2])\r",
							"pm.test(\"Check salary 3\", function () {\r",
							"    pm.expect(query_salary3 * 3).to.eql(resp_salary3);\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"let env_name = query.name\r",
							"pm.environment.set(\"names\", env_name)\r",
							"// 19. Передать в окружение переменную age\r",
							"let env_age = query.age\r",
							"pm.environment.set(\"age\", env_age)\r",
							"// 20. Передать в окружение переменную salary\r",
							"let env_salary = query.salary\r",
							"pm.environment.set(\"salary\", env_salary)\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"let i;\r",
							"for (i = 0; i < resp_salary.length; ++i) {\r",
							"    console.log(resp_salary[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"value": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Aleksandr&age=25&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Aleksandr"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let resp_f = pm.response.json()\r",
							"// 7. Спарсить request.\r",
							"let req_f = request.data\r",
							"console.log(req_f)\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"let start_qa_salary = resp_f.start_qa_salary\r",
							"console.log(start_qa_salary)\r",
							"pm.test(\"Check start_qa_salary\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"let resp_f_person = resp_f.person\r",
							"pm.test(\"Check person\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"person\");\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_f_salary = +req_f.salary\r",
							"pm.test(\"Check start_qa_salary equal salary\", function () {\r",
							"    pm.expect(req_f_salary).to.eql(start_qa_salary);\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_6_months equal salary*2\", function () {\r",
							"    pm.expect(req_f_salary * 2).to.eql(resp_f['qa_salary_after_6_months']);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_12_months equal salary*2.7\", function () {\r",
							"    pm.expect(req_f_salary * 2.7).to.eql(resp_f['qa_salary_after_12_months']);\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_1.5_year equal salary*3.3\", function () {\r",
							"    pm.expect(+req_f_salary * 3.3).to.eql(resp_f['qa_salary_after_1.5_year']);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_3.8_year equal salary*3.8\", function () {\r",
							"    pm.expect(+req_f_salary * 3.8).to.eql(resp_f['qa_salary_after_3.5_years']);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check salary in u_name\", function () {\r",
							"    pm.expect(req_f_salary).to.eql(resp_f.person.u_name[1]);\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let req_f_age = +req_f.age\r",
							"pm.test(\"Check age in u_age\", function () {\r",
							"    pm.expect(req_f_age).to.eql(resp_f.person.u_age);\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let u_salary_5_years = +resp_f.person.u_salary_5_years\r",
							"pm.test(\"Check u_salary_5_years equal salary*4.2\", function () {\r",
							"    pm.expect(+req_f_salary * 4.2).to.eql(u_salary_5_years);\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (key in resp_f_person) {\r",
							"    console.log(key, resp_f_person[key]);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Aleksandr",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5006/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}",
							"disabled": true
						},
						{
							"key": "age",
							"value": "{{age}}",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}